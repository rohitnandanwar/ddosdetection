#include <pcap.h>
#include <iostream>
#include <fstream>  // File handling
#include <ctime>
#include <arpa/inet.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <netinet/ether.h>

using namespace std;

// Function to get current timestamp
string getTimestamp() {
    time_t now = time(0);
    struct tm tstruct;
    char buf[80];
    tstruct = *localtime(&now);
    strftime(buf, sizeof(buf), "%Y-%m-%d %X", &tstruct);
    return string(buf);
}

// Open CSV file for writing (append mode)
ofstream outputFile("traffic_data.csv", ios::app);

// Callback function for capturing packets
void packetHandler(u_char *user, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    struct ether_header *ethHeader = (struct ether_header *)packet;

    // Check if it's an IP packet
    if (ntohs(ethHeader->ether_type) == ETHERTYPE_IP) {
        struct ip *ipHeader = (struct ip *)(packet + sizeof(struct ether_header));
        string srcIP = inet_ntoa(ipHeader->ip_src);
        string dstIP = inet_ntoa(ipHeader->ip_dst);
        int size = pkthdr->len;
        string timestamp = getTimestamp();

        // Identify protocol
        string protocol;
        if (ipHeader->ip_p == IPPROTO_TCP) protocol = "TCP";
        else if (ipHeader->ip_p == IPPROTO_UDP) protocol = "UDP";
        else protocol = "Other";

        // Print output
        cout << "[" << timestamp << "] " << "Source: " << srcIP 
             << " -> Destination: " << dstIP << " | Size: " << size 
             << " bytes | Protocol: " << protocol << endl;

        // Ensure file is open before writing
        if (outputFile.is_open()) {
            outputFile << timestamp << "," << srcIP << "," << dstIP << "," << size << "," << protocol << endl;
        } else {
            cerr << "Error: Unable to open file for writing!" << endl;
        }
    }
}

int main() {
    char errbuf[PCAP_ERRBUF_SIZE];
    pcap_if_t *alldevs, *device;

    // Get available network devices
    if (pcap_findalldevs(&alldevs, errbuf) == -1) {
        cerr << "Error finding devices: " << errbuf << endl;
        return 1;
    }
    device = alldevs;
    if (!device) {
        cerr << "No network device found!" << endl;
        return 1;
    }

    cout << "Capturing on device: " << device->name << endl;

    // Open the network device
    pcap_t *handle = pcap_open_live(device->name, BUFSIZ, 1, 1000, errbuf);
    if (!handle) {
        cerr << "Failed to open device: " << errbuf << endl;
        return 1;
    }

    cout << "Listening for traffic...\n";

    // Capture packets indefinitely
    pcap_loop(handle, 0, packetHandler, nullptr);

    // Cleanup
    pcap_close(handle);
    pcap_freealldevs(alldevs);
    outputFile.close();  // Close file after capture

    return 0;
}
